---
# === systemd-nspawn defaults ==================================================
# Default networks that will be applied ONLY to nspwan deployments.
nspawn_networks:
  default_network:
    type: veth
    address: dhcp

# Defined CPU architecture map
nspawn_architecture_mapping:
  x86_64: amd64
  ppc64le: ppc64el
  s390x: s390x
  armv7l: armhf

# Set the cache map used when creating the container.
#  nspawn_map:
#    distro: "$DISTRO_NAME"
#    arch: "{{ nspawn_architecture_mapping[container_architecture] }}"
#    release: "{{ hostvars[physical_host]['ansible_distribution_version'] }}"
nspawn_map: "{{ _nspawn_map | default({}) }}"

# Enable or Disable the use of systemd-resolved. Option is Boolean.
nspawn_container_enable_resolved: "{{ _nspawn_container_enable_resolved | default(true) }}"

# Enable or Disable config preservation. If this is disabled a new configuration
# file for the systemd container will be created, even if the container already
# exists. When this is set to "false" the container will be restarted should the
# configuration task(s) result in change.
nspawn_container_preserve_config: true

# Enable or Disable the BTRFS quota system for the "/var/lib/machines" mount
# point. More information on the BTRFS quota system can be found here:
#  * https://btrfs.wiki.kernel.org/index.php/Quota_support
nspawn_host_machine_quota_disabled: false

# Set the default qgroup limits used for file system quotas. The default is
# "none". See the following documentation for more information:
#  * https://btrfs.wiki.kernel.org/index.php/Manpage/btrfs-qgroup
nspawn_host_qgroup_space_limit: none
nspawn_host_qgroup_compression_limit: none


# === General container defaults ===============================================
# NOTE(cloudnull): These are host specific variables we capture up-front. These
#                  psuedo variables are used to capture the container host
#                  information but could be overridden to deploy whatever.
container_host: "{{ hostvars[inventory_hostname]['physical_host'] | default('localhost') }}"
container_architecture: "{{ hostvars[container_host]['ansible_architecture'] | lower }}"

# Name of the on-disk image to use for deployment.
container_image: "{{ nspawn_map['distro'] }}-{{ nspawn_map['release'] }}-{{ nspawn_map['arch'] }}"

# The domain the containers will exist within.
container_domain: "local"

# Container Default Read-Only bind mounts. This option will be merged with the container
# ro bind mounts.
container_default_ro_bind_mounts:
  - host_path: '/var/lib/machines/.ssh'
    container_path: '/root/.ssh'

# Same as container_default_ro_bind_mounts. This should be used in host_vars
container_ro_bind_mounts: []

# Container Default bind mounts. This option will be merged with the container
# bind mounts.
container_default_bind_mounts: []

# Same as container_default_bind_mounts. This should be used in host_vars
container_bind_mounts: []

# Default networks that will be applied ALL containerized deployments.
container_default_networks:
  management_address:
    address: "{{ ansible_host | default('localhost') }}"
    netmask: "255.255.255.0"
    bridge: "br-mgmt"
    static_routes:
      - cidr: 172.29.100.0/24
        gateway: 172.29.100.100

container_networks: {}
